"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sinon = require("sinon");
function stubObject(object, methods) {
    const stubObject = Object.assign({}, object);
    const objectMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(object));
    const excludedMethods = [
        '__defineGetter__', '__defineSetter__', 'hasOwnProperty',
        '__lookupGetter__', '__lookupSetter__', 'propertyIsEnumerable',
        'toString', 'valueOf', '__proto__', 'toLocaleString', 'isPrototypeOf'
    ];
    for (let method in object) {
        if (typeof object[method] == "function") {
            objectMethods.push(method);
        }
    }
    for (let method of objectMethods) {
        if (!excludedMethods.includes(method)) {
            stubObject[method] = object[method];
        }
    }
    if (Array.isArray(methods)) {
        for (let method of methods) {
            stubObject[method] = sinon.stub();
        }
    }
    else if (typeof methods == "object") {
        for (let method in methods) {
            stubObject[method] = sinon.stub();
            stubObject[method].returns(methods[method]);
        }
    }
    else {
        for (let method of objectMethods) {
            if (typeof object[method] == "function" && method !== "constructor") {
                stubObject[method] = sinon.stub();
            }
        }
    }
    return stubObject;
}
exports.stubObject = stubObject;
function stubInterface(methods = {}) {
    const object = stubObject({}, methods);
    const proxy = new Proxy(object, {
        get: (target, name) => {
            if (!target[name]) {
                target[name] = sinon.stub();
            }
            return target[name];
        }
    });
    return proxy;
}
exports.stubInterface = stubInterface;
sinon['stubObject'] = stubObject;
sinon['stubInterface'] = stubInterface;
exports.default = sinon;
//# sourceMappingURL=index.js.map